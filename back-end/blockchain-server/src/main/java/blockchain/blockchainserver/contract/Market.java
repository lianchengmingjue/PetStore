package org.fisco.bcos.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple10;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple9;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Market extends Contract {
    public static final String[] BINARY_ARRAY = {"","","60010190808311611d1a575b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611e12578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dfe5780601f10611dd357610100808354040283529160200191611dfe565b820191906000526020600020905b815481529060010190602001808311611de157829003601f168201915b505050505081526020019060010190611d56565b5050505090509c509c509c509c509c509c509c509c509c5050505050909192939495969798565b6060806060806060806060806060600080600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ec2906174d0565b602060405180830381600087803b158015611edc57600080fd5b505af1158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f149190810190616783565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611f7a57600080fd5b505af1158015611f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fb29190810190616708565b601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18f6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120699190617446565b600060405180830381600087803b15801561208357600080fd5b505af1158015612097573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e39601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161211291906170a9565b602060405180830381600087803b15801561212c57600080fd5b505af1158015612140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121649190810190616731565b92508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156121ca57600080fd5b505af11580156121de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061220291908101906167ac565b60405190808252806020026020018201604052801561223557816020015b60608152602001906001900390816122205790505b506009600001908051906020019061224e929190616379565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156122b357600080fd5b505af11580156122c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122eb91908101906167ac565b60405190808252806020026020018201604052801561231e57816020015b60608152602001906001900390816123095790505b5060096001019080519060200190612337929190616379565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561239c57600080fd5b505af11580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123d491908101906167ac565b60405190808252806020026020018201604052801561240757816020015b60608152602001906001900390816123f25790505b5060096002019080519060200190612420929190616379565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561248557600080fd5b505af1158015612499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124bd91908101906167ac565b6040519080825280602002602001820160405280156124f057816020015b60608152602001906001900390816124db5790505b5060096003019080519060200190612509929190616379565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561256e57600080fd5b505af1158015612582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125a691908101906167ac565b6040519080825280602002602001820160405280156125d957816020015b60608152602001906001900390816125c45790505b50600960040190805190602001906125f2929190616379565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561265757600080fd5b505af115801561266b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061268f91908101906167ac565b6040519080825280602002602001820160405280156126c257816020015b60608152602001906001900390816126ad5790505b50600960050190805190602001906126db929190616379565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561274057600080fd5b505af1158015612754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061277891908101906167ac565b6040519080825280602002602001820160405280156127ab57816020015b60608152602001906001900390816127965790505b50600960060190805190602001906127c4929190616379565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561282957600080fd5b505af115801561283d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061286191908101906167ac565b60405190808252806020026020018201604052801561288f5781602001602082028038833980820191505090505b50600960070190805190602001906128a89291906163d9565b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561290d57600080fd5b505af1158015612921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061294591908101906167ac565b60405190808252806020026020018201604052801561297857816020015b60608152602001906001900390816129635790505b5060096008019080519060200190612991929190616379565b50600091505b8273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156129fb57600080fd5b505af1158015612a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a3391908101906167ac565b821215613283578273ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a8f9190616f7e565b602060405180830381600087803b158015612aa957600080fd5b505af1158015612abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ae1919081019061675a565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b36906172f4565b600060405180830381600087803b158015612b5057600080fd5b505af1158015612b64573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612b8d9190810190616816565b600960000183815481101515612b9f57fe5b906000526020600020019080519060200190612bbc929190616426565b508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c1090617251565b600060405180830381600087803b158015612c2a57600080fd5b505af1158015612c3e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612c679190810190616816565b600960010183815481101515612c7957fe5b906000526020600020019080519060200190612c96929190616426565b508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612cea906171a7565b600060405180830381600087803b158015612d0457600080fd5b505af1158015612d18573d6000803e3d6000fd5b505050506040513d6000","","5af1158015613d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613d5991908101906167ac565b1415613d6c576000601381905550613d94565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6013819055505b7f860b16b321f135d6c086c37057beb74d34a7c2b4a569976e8bc6739a5906838b60135484604051613dc7929190616f99565b60405180910390a160135491505092915050565b6000806000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613e55906174d0565b602060405180830381600087803b158015613e6f57600080fd5b505af1158015613e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613ea79190810190616783565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613f0d57600080fd5b505af1158015613f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613f459190810190616708565b601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613ffc9190617314565b600060405180830381600087803b15801561401657600080fd5b505af115801561402a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e8434e39601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016140a591906170a9565b602060405180830381600087803b1580156140bf57600080fd5b505af11580156140d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506140f79190810190616731565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561415f57600080fd5b505af1158015614173573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061419791908101906167ac565b14156141aa5760006013819055506141d2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6013819055505b60135492505050919050565b6000806000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614258906174d0565b602060405180830381600087803b15801561427257600080fd5b505af1158015614286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506142aa9190810190616783565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561431057600080fd5b505af1158015614324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614348919081019061675a565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161439d90617141565b600060405180830381600087803b1580156143b757600080fd5b505af11580156143cb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168e6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016144249190617314565b600060405180830381600087803b15801561443e57600080fd5b505af1158015614452573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016144ab9190617271565b600060405180830381600087803b1580156144c557600080fd5b505af11580156144d9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161453291906171c7565b600060405180830381600087803b15801561454c57600080fd5b505af1158015614560573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016145b9919061749b565b600060405180830381600087803b1580156145d357600080fd5b505af11580156145e7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614640919061721c565b600060405180830381600087803b15801561465a57600080fd5b505af115801561466e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016146c79190617369565b600060405180830381600087803b1580156146e157600080fd5b505af11580156146f5573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161474e91906173be565b600060405180830381600087803b15801561476857600080fd5b505af115801561477c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016147d591906172c6565b600060405180830381600087803b1580156147ef57600080fd5b505af1158015614803573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161485c9190617446565b600060405180830381600087803b15801561487657600080fd5b505af115801561488a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156148f257600080fd5b505af1158015614906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061492a9190810190616708565b601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18e6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016149e19190617314565b600060405180830381600087803b1580156149fb57600080fd5b505af1158015614a0f573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a183601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614a8e929190617105565b602060405180830381600087803b158015614aa857600080fd5b505af1158015614abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614ae091908101906167ac565b1415614af3576000601381905550614b1b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6013819055505b7f0329346aaa4546d20b8ea607968b62fc26ebce49706ab59e24f884b1a4f0045d60135485604051614b4e929190616f99565b60405180910390a1601354925050509a9950505050505050505050565b6060806060806060806060600060606000806000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614bf4906174d0565b602060405180830381600087803b158015614c0e57600080fd5b505af1158015614c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614c469190810190616783565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614cac57600080fd5b505af1158015614cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614ce49190810190616708565b601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790","5550601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d9b9190617314565b600060405180830381600087803b158015614db557600080fd5b505af1158015614dc9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e8434e39601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614e4491906170a9565b602060405180830381600087803b158015614e5e57600080fd5b505af1158015614e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614e969190810190616731565b91508173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614eee9190616fc9565b602060405180830381600087803b158015614f0857600080fd5b505af1158015614f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614f40919081019061675a565b9050610120604051908101604052808273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614fa2906172f4565b600060405180830381600087803b158015614fbc57600080fd5b505af1158015614fd0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614ff99190810190616816565b81526020018273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161505190617251565b600060405180830381600087803b15801561506b57600080fd5b505af115801561507f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506150a89190810190616816565b81526020018273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615100906171a7565b600060405180830381600087803b15801561511a57600080fd5b505af115801561512e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506151579190810190616816565b81526020018273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016151af9061747b565b600060405180830381600087803b1580156151c957600080fd5b505af11580156151dd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506152069190810190616816565b81526020018273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161525e906171fc565b600060405180830381600087803b15801561527857600080fd5b505af115801561528c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506152b59190810190616816565b81526020018273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161530d90617349565b600060405180830381600087803b15801561532757600080fd5b505af115801561533b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506153649190810190616816565b81526020018273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016153bc9061739e565b600060405180830381600087803b1580156153d657600080fd5b505af11580156153ea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506154139190810190616816565b81526020018273ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161546b906172a6565b602060405180830381600087803b15801561548557600080fd5b505af1158015615499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506154bd91908101906167ac565b81526020018273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161551590617426565b600060405180830381600087803b15801561552f57600080fd5b505af1158015615543573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061556c9190810190616816565b81525060008082015181600001908051906020019061558c9291906164a6565b5060208201518160010190805190602001906155a99291906164a6565b5060408201518160020190805190602001906155c69291906164a6565b5060608201518160030190805190602001906155e39291906164a6565b5060808201518160040190805190602001906156009291906164a6565b5060a082015181600501908051906020019061561d9291906164a6565b5060c082015181600601908051906020019061563a9291906164a6565b5060e082015181600701556101008201518160080190805190602001906156629291906164a6565b50905050600080016000600101600060020160006003016000600401600060050160006006016000600701546000600801888054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156157285780601f106156fd57610100808354040283529160200191615728565b820191906000526020600020905b81548152906001019060200180831161570b57829003601f168201915b50505050509850878054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156157c45780601f10615799576101008083540402835291602001916157c4565b820191906000526020600020905b8154815290600101906020018083116157a757829003601f168201915b50505050509750868054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156158605780601f1061583557610100808354040283529160200191615860565b820191906000526020600020905b81548152906001019060200180831161584357829003601f168201915b50505050509650858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156158fc5780601f106158d1576101008083540402835291602001916158fc565b820191906000526020600020905b8154815290600101906020018083116158df57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156159985780601f1061596d57610100808354040283529160200191615998565b820191906000526020600020905b81548152906001019060200180831161597b57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615a345780601f10615a0957610100808354040283529160200191615a34565b820191906000526020600020905b815481529060010190602001808311615a1757829003601f168201915b50505050509350828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615ad05780601f10615aa557610100808354040283529160200191615ad0565b820191906000526020600020905b815481529060010190602001808311615ab357829003601f168201915b50505050509250808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615b6c5780601f10615b4157610100808354040283529160200191615b6c565b820191906000526020600020905b815481529060010190602001808311615b4f57829003601f168201915b505050505090509b509b509b509b509b509b509b509b509b505050509193959799909294969850565b6000806000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615c0f906174d0565b602060405180830381600087803b158015615c2957600080fd5b505af1158015615c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615c619190810190616783565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015615cc757600080fd5b505af1158015615cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615cff919081019061675a565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163","","20830152604082019050919050565b6000600682527f7065745f696400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f70686f746f5f75726c00000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f6f6e5f73656c6c000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f757365725f6964000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f76617269657479000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600182527f31000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f745f7065740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610120820190508181036000830152616ecd818c616ad1565b90508181036020830152616ee1818b616ad1565b90508181036040830152616ef5818a616ad1565b90508181036060830152616f098189616ad1565b90508181036080830152616f1d8188616ad1565b905081810360a0830152616f318187616ad1565b905081810360c0830152616f458186616ad1565b905081810360e0830152616f598185616a76565b9050818103610100830152616f6e8184616ad1565b90509a9950505050505050505050565b6000602082019050616f936000830184616b5d565b92915050565b6000604082019050616fae6000830185616b5d565b8181036020830152616fc08184616b7b565b90509392505050565b6000602082019050616fde6000830184616b6c565b92915050565b6000610120820190508181036000830152616fff818c616b7b565b90508181036020830152617013818b616b7b565b90508181036040830152617027818a616b7b565b9050818103606083015261703b8189616b7b565b9050818103608083015261704f8188616b7b565b905081810360a08301526170638187616b7b565b905081810360c08301526170778186616b7b565b905061708660e0830185616b5d565b8181036101008301526170998184616b7b565b90509a9950505050505050505050565b600060408201905081810360008301526170c281616c1e565b90506170d16020830184616b3f565b92915050565b600060408201905081810360008301526170f081616c1e565b90506170ff6020830184616b4e565b92915050565b6000606082019050818103600083015261711e81616c1e565b905061712d6020830185616b4e565b61713a6040830184616b3f565b9392505050565b6000604082019050818103600083015261715a81616c1e565b9050818103602083015261716d81616be7565b9050919050565b6000604082019050818103600083015261718d81616c1e565b905081810360208301526171a081616c1e565b9050919050565b600060208201905081810360008301526171c081616c55565b9050919050565b600060408201905081810360008301526171e081616c55565b905081810360208301526171f48184616b7b565b905092915050565b6000602082019050818103600083015261721581616c8c565b9050919050565b6000604082019050818103600083015261723581616c8c565b905081810360208301526172498184616b7b565b905092915050565b6000602082019050818103600083015261726a81616cc3565b9050919050565b6000604082019050818103600083015261728a81616cc3565b9050818103602083015261729e8184616b7b565b905092915050565b600060208201905081810360008301526172bf81616cfa565b9050919050565b600060408201905081810360008301526172df81616cfa565b90506172ee6020830184616b5d565b92915050565b6000602082019050818103600083015261730d81616d31565b9050919050565b6000604082019050818103600083015261732d81616d31565b905081810360208301526173418184616b7b565b905092915050565b6000602082019050818103600083015261736281616d68565b9050919050565b6000604082019050818103600083015261738281616d68565b905081810360208301526173968184616b7b565b905092915050565b600060208201905081810360008301526173b781616d9f565b9050919050565b600060408201905081810360008301526173d781616d9f565b905081810360208301526173eb8184616b7b565b905092915050565b6000604082019050818103600083015261740c81616d9f565b9050818103602083015261741f81616e44565b9050919050565b6000602082019050818103600083015261743f81616dd6565b9050919050565b6000604082019050818103600083015261745f81616dd6565b905081810360208301526174738184616b7b565b905092915050565b6000602082019050818103600083015261749481616e0d565b9050919050565b600060408201905081810360008301526174b481616e0d565b905081810360208301526174c88184616b7b565b905092915050565b600060208201905081810360008301526174e981616e7b565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561751357600080fd5b8060405250919050565b600067ffffffffffffffff82111561753457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006175de826175a9565b9050919050565b60006175f0826175a9565b9050919050565b6000617602826175a9565b9050919050565b6000617614826175a9565b9050919050565b6000819050919050565b6000617630826175a9565b9050919050565b6000617642826175a9565b9050919050565b6000617654826175c9565b9050919050565b82818337600083830152505050565b60005b8381101561768857808201518184015260208101905061766d565b83811115617697576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058208bb3a61fbdcece69e7bf604805adff8b1d57b1220a89bb0d0d40614a674dd3236c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[],\"name\":\"selectOnSell\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"string\"}],\"name\":\"selectByUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet_id\",\"type\":\"string\"},{\"name\":\"emit_description\",\"type\":\"string\"}],\"name\":\"removePet\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet_id\",\"type\":\"string\"}],\"name\":\"uniqueId\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet_id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"birth\",\"type\":\"string\"},{\"name\":\"variety\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"photo_url\",\"type\":\"string\"},{\"name\":\"on_sell\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"user_id\",\"type\":\"string\"},{\"name\":\"emit_description\",\"type\":\"string\"}],\"name\":\"updatePet\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet_id\",\"type\":\"string\"}],\"name\":\"selectByPetId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pet_id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"birth\",\"type\":\"string\"},{\"name\":\"variety\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"photo_url\",\"type\":\"string\"},{\"name\":\"on_sell\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"user_id\",\"type\":\"string\"},{\"name\":\"emit_description\",\"type\":\"string\"}],\"name\":\"registPet\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"emit_describe\",\"type\":\"string\"}],\"name\":\"RegisterPetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"emit_describe\",\"type\":\"string\"}],\"name\":\"UpdatePetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"emit_describe\",\"type\":\"string\"}],\"name\":\"RemovePetEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_SELECTONSELL = "selectOnSell";

    public static final String FUNC_SELECTBYUSERID = "selectByUserId";

    public static final String FUNC_REMOVEPET = "removePet";

    public static final String FUNC_UNIQUEID = "uniqueId";

    public static final String FUNC_UPDATEPET = "updatePet";

    public static final String FUNC_SELECTBYPETID = "selectByPetId";

    public static final String FUNC_REGISTPET = "registPet";

    public static final Event REGISTERPETEVENT_EVENT = new Event("RegisterPetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEPETEVENT_EVENT = new Event("UpdatePetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEPETEVENT_EVENT = new Event("RemovePetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> selectOnSell() {
        final Function function = new Function(
                FUNC_SELECTONSELL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void selectOnSell(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SELECTONSELL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String selectOnSellSeq() {
        final Function function = new Function(
                FUNC_SELECTONSELL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple9<List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>, List<String>> getSelectOnSellOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTONSELL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple9<List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>, List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                convertToNative((List<Utf8String>) results.get(6).getValue()), 
                convertToNative((List<Int256>) results.get(7).getValue()), 
                convertToNative((List<Utf8String>) results.get(8).getValue())
                );
    }

    public RemoteCall<TransactionReceipt> selectByUserId(String user_id) {
        final Function function = new Function(
                FUNC_SELECTBYUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void selectByUserId(String user_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SELECTBYUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String selectByUserIdSeq(String user_id) {
        final Function function = new Function(
                FUNC_SELECTBYUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSelectByUserIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTBYUSERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple9<List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>, List<String>> getSelectByUserIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTBYUSERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple9<List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>, List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                convertToNative((List<Utf8String>) results.get(6).getValue()), 
                convertToNative((List<Int256>) results.get(7).getValue()), 
                convertToNative((List<Utf8String>) results.get(8).getValue())
                );
    }

    public RemoteCall<TransactionReceipt> removePet(String pet_id, String emit_description) {
        final Function function = new Function(
                FUNC_REMOVEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void removePet(String pet_id, String emit_description, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String removePetSeq(String pet_id, String emit_description) {
        final Function function = new Function(
                FUNC_REMOVEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getRemovePetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemovePetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> uniqueId(String pet_id) {
        final Function function = new Function(
                FUNC_UNIQUEID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void uniqueId(String pet_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UNIQUEID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String uniqueIdSeq(String pet_id) {
        final Function function = new Function(
                FUNC_UNIQUEID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getUniqueIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNIQUEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getUniqueIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNIQUEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> updatePet(String pet_id, String name, String birth, String variety, String description, String photo_url, String on_sell, BigInteger price, String user_id, String emit_description) {
        final Function function = new Function(
                FUNC_UPDATEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(birth), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(variety), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(photo_url), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(on_sell), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updatePet(String pet_id, String name, String birth, String variety, String description, String photo_url, String on_sell, BigInteger price, String user_id, String emit_description, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(birth), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(variety), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(photo_url), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(on_sell), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updatePetSeq(String pet_id, String name, String birth, String variety, String description, String photo_url, String on_sell, BigInteger price, String user_id, String emit_description) {
        final Function function = new Function(
                FUNC_UPDATEPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(birth), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(variety), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(photo_url), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(on_sell), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple10<String, String, String, String, String, String, String, BigInteger, String, String> getUpdatePetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple10<String, String, String, String, String, String, String, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdatePetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> selectByPetId(String pet_id) {
        final Function function = new Function(
                FUNC_SELECTBYPETID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void selectByPetId(String pet_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SELECTBYPETID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String selectByPetIdSeq(String pet_id) {
        final Function function = new Function(
                FUNC_SELECTBYPETID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSelectByPetIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTBYPETID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple9<String, String, String, String, String, String, String, BigInteger, String> getSelectByPetIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTBYPETID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple9<String, String, String, String, String, String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> registPet(String pet_id, String name, String birth, String variety, String description, String photo_url, String on_sell, BigInteger price, String user_id, String emit_description) {
        final Function function = new Function(
                FUNC_REGISTPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(birth), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(variety), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(photo_url), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(on_sell), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registPet(String pet_id, String name, String birth, String variety, String description, String photo_url, String on_sell, BigInteger price, String user_id, String emit_description, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(birth), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(variety), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(photo_url), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(on_sell), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registPetSeq(String pet_id, String name, String birth, String variety, String description, String photo_url, String on_sell, BigInteger price, String user_id, String emit_description) {
        final Function function = new Function(
                FUNC_REGISTPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(pet_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(birth), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(variety), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(photo_url), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(on_sell), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(user_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(emit_description)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple10<String, String, String, String, String, String, String, BigInteger, String, String> getRegistPetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple10<String, String, String, String, String, String, String, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue()
                );
    }

    public Tuple1<BigInteger> getRegistPetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<RegisterPetEventEventResponse> getRegisterPetEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERPETEVENT_EVENT, transactionReceipt);
        ArrayList<RegisterPetEventEventResponse> responses = new ArrayList<RegisterPetEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterPetEventEventResponse typedResponse = new RegisterPetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.emit_describe = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerRegisterPetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTERPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerRegisterPetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTERPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<UpdatePetEventEventResponse> getUpdatePetEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEPETEVENT_EVENT, transactionReceipt);
        ArrayList<UpdatePetEventEventResponse> responses = new ArrayList<UpdatePetEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdatePetEventEventResponse typedResponse = new UpdatePetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.emit_describe = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerUpdatePetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UPDATEPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerUpdatePetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UPDATEPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<RemovePetEventEventResponse> getRemovePetEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEPETEVENT_EVENT, transactionReceipt);
        ArrayList<RemovePetEventEventResponse> responses = new ArrayList<RemovePetEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemovePetEventEventResponse typedResponse = new RemovePetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.emit_describe = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerRemovePetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REMOVEPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerRemovePetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REMOVEPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class RegisterPetEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String emit_describe;
    }

    public static class UpdatePetEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String emit_describe;
    }

    public static class RemovePetEventEventResponse {
        public Log log;

        public BigInteger ret;

        public String emit_describe;
    }
}
